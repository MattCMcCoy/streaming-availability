datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  followers     Follow[]  @relation("Followers")
  following     Follow[]  @relation("Following")
  likes         Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id          String   @id @unique @default(cuid())
  createdAt   DateTime @default(now())
  header      String
  message     String
  mid         Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([createdById])
}

model Like {
  id        String   @id @unique @default(cuid())
  createdAt DateTime @default(now())
  message   String
  mid       Int
  likedBy   User     @relation(fields: [likedById], references: [id])
  likedById String

  @@index([likedById])
}

model Follow {
  id          String   @id @unique @default(cuid())
  createdAt   DateTime @default(now())
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String

  @@index([followerId])
  @@index([followingId])
}
